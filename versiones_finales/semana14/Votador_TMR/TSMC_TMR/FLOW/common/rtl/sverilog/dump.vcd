$date
	Sun May 11 20:05:02 2025
$end

$version
	Synopsys VCS version U-2023.03-SP2_Full64
$end

$timescale
	1ps
$end

$comment Csum: 1 d0d09fb998cc36fa $end


$scope module top_tb $end
$var reg 4 ! data_1 [3:0] $end
$var reg 4 " data_2 [3:0] $end
$var reg 4 # data_3 [3:0] $end
$var reg 4 $ tmr_out [3:0] $end
$var reg 1 % introduce_error_1 $end
$var reg 1 & introduce_error_2 $end
$var reg 1 ' introduce_error_3 $end
$var reg 1 ( introduce_error_4 $end

$scope module dut $end
$var reg 4 ) data_1 [3:0] $end
$var reg 4 * data_2 [3:0] $end
$var reg 4 + data_3 [3:0] $end
$var reg 4 , tmr_out [3:0] $end
$var reg 4 - v_1 [3:0] $end
$var reg 4 . v_2 [3:0] $end
$var reg 4 / v_3 [3:0] $end

$scope module voter_1 $end
$var reg 4 0 voted_data [3:0] $end
$var reg 4 1 data_1 [3:0] $end
$var reg 4 2 data_2 [3:0] $end
$var reg 4 3 data_3 [3:0] $end
$upscope $end


$scope module voter_2 $end
$var reg 4 4 voted_data [3:0] $end
$var reg 4 5 data_1 [3:0] $end
$var reg 4 6 data_2 [3:0] $end
$var reg 4 7 data_3 [3:0] $end
$upscope $end


$scope module voter_3 $end
$var reg 4 8 voted_data [3:0] $end
$var reg 4 9 data_1 [3:0] $end
$var reg 4 : data_2 [3:0] $end
$var reg 4 ; data_3 [3:0] $end
$upscope $end


$scope module final_voter $end
$var reg 4 < voted_data [3:0] $end
$var reg 4 = data_1 [3:0] $end
$var reg 4 > data_2 [3:0] $end
$var reg 4 ? data_3 [3:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
x%
x&
x'
x(
b1101 0
b1101 4
b1101 8
b1101 !
b1101 "
b1101 #
b1101 )
b1101 *
b1101 +
b1101 ,
b1101 =
b1101 >
b1101 ?
b1101 <
b1101 $
b1101 -
b1101 .
b1101 /
b1101 1
b1101 2
b1101 3
b1101 5
b1101 6
b1101 7
b1101 9
b1101 :
b1101 ;
$end
#10000
0%
0&
0'
0(
b1100 !
b1100 )
b1100 9
b1100 5
b1100 1
b1100 "
b1100 *
b1100 :
b1100 6
b1100 2
b1001 #
b1001 +
b1001 ;
b1001 7
b1001 3
b1100 8
b1100 /
b1100 ?
b1100 4
b1100 .
b1100 >
b1100 0
b1100 -
b1100 =
b1100 <
b1100 ,
b1100 $
#20000
b1000 !
b1000 )
b1000 9
b1000 5
b1000 1
b1110 "
b1110 *
b1110 :
b1110 6
b1110 2
b1000 #
b1000 +
b1000 ;
b1000 7
b1000 3
b1000 8
b1000 /
b1000 ?
b1000 4
b1000 .
b1000 >
b1000 0
b1000 -
b1000 =
b1000 <
b1000 ,
b1000 $
#30000
b1110 !
b1110 )
b1110 9
b1110 5
b1110 1
b1011 "
b1011 *
b1011 :
b1011 6
b1011 2
b1011 #
b1011 +
b1011 ;
b1011 7
b1011 3
b1011 8
b1011 /
b1011 ?
b1011 4
b1011 .
b1011 >
b1011 0
b1011 -
b1011 =
b1011 <
b1011 ,
b1011 $
#40000
b1111 !
b1111 )
b1111 9
b1111 5
b1111 1
b1111 "
b1111 *
b1111 :
b1111 6
b1111 2
b1111 #
b1111 +
b1111 ;
b1111 7
b1111 3
b1111 8
b1111 /
b1111 ?
b1111 4
b1111 .
b1111 >
b1111 0
b1111 -
b1111 =
b1111 <
b1111 ,
b1111 $
#50000
b1000 !
b1000 )
b1000 9
b1000 5
b1000 1
b1110 "
b1110 *
b1110 :
b1110 6
b1110 2
b1110 #
b1110 +
b1110 ;
b1110 7
b1110 3
b1110 8
b1110 /
b1110 ?
b1110 4
b1110 .
b1110 >
b1110 0
b1110 -
b1110 =
b1110 <
b1110 ,
b1110 $
#60000
b1110 !
b1110 )
b1110 9
b1110 5
b1110 1
b1011 "
b1011 *
b1011 :
b1011 6
b1011 2
b1011 #
b1011 +
b1011 ;
b1011 7
b1011 3
b1011 8
b1011 /
b1011 ?
b1011 4
b1011 .
b1011 >
b1011 0
b1011 -
b1011 =
b1011 <
b1011 ,
b1011 $
#70000
1(
b1111 !
b1111 )
b1111 9
b1111 5
b1111 1
b1101 "
b1101 *
b1101 :
b1101 6
b1101 2
b1111 #
b1111 +
b1111 ;
b1111 7
b1111 3
b1101 8
b1101 /
b1101 ?
b1101 4
b1101 .
b1101 >
b1101 8
b1101 4
b1111 0
b1111 -
b1111 =
b1101 <
b1101 ,
b1101 $
#80000
0(
b1111 "
b1111 *
b1111 :
b1111 6
b1111 2
