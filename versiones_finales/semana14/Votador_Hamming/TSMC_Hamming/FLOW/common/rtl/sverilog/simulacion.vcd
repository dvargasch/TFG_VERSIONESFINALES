$date
	Thu May 29 09:42:26 2025
$end

$version
	Synopsys VCS version R-2020.12-SP2_Full64
$end

$timescale
	1ps
$end

$comment Csum: 1 615fb6d25fcb6ca0 $end


$scope module tb_top_module $end

$scope module dut $end
$var reg 4 ! data_1 [3:0] $end
$var reg 4 " data_2 [3:0] $end
$var reg 4 # data_3 [3:0] $end
$var reg 4 $ voted_q [3:0] $end
$var reg 1 % fault $end
$var reg 7 & voted_encoded [6:0] $end
$var reg 7 ' d_1 [6:0] $end
$var reg 7 ( d_2 [6:0] $end
$var reg 7 ) d_3 [6:0] $end

$scope module encoder_data_1 $end
$var reg 4 * data [3:0] $end
$var reg 7 + coded_data [6:0] $end
$upscope $end


$scope module encoder_data_2 $end
$var reg 4 , data [3:0] $end
$var reg 7 - coded_data [6:0] $end
$upscope $end


$scope module encoder_data_3 $end
$var reg 4 . data [3:0] $end
$var reg 7 / coded_data [6:0] $end
$upscope $end


$scope module voter_inst $end
$var reg 7 0 data_voted [6:0] $end
$var reg 7 1 coded_data_1 [6:0] $end
$var reg 7 2 coded_data_2 [6:0] $end
$var reg 7 3 coded_data_3 [6:0] $end
$upscope $end


$scope module decoder_inst $end
$var reg 7 4 coded_data_voted [6:0] $end
$var reg 4 5 decoded [3:0] $end
$var reg 1 6 error $end

$scope begin unnamed$$_0 $end
$var reg 3 7 syndrome [2:0] $end
$var reg 7 8 data_to_be_decoded [6:0] $end
$upscope $end

$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
06
0%
b1011010 1
b1011010 2
b1011010 3
b1011010 4
b1011010 '
b1011010 (
b1011010 )
b1010 !
b1010 "
b1010 #
b1011010 0
b1010 5
b1011010 8
b000 7
b1011010 &
b1010 $
b1011010 +
b1010 *
b1011010 -
b1010 ,
b1011010 /
b1010 .
$end
#10000
b1100 !
b1100 *
b1100 "
b1100 ,
b1000 #
b1000 .
b0111100 +
b0111100 '
b0111100 1
b0111100 -
b0111100 (
b0111100 2
b1110000 /
b1110000 )
b1110000 3
b0111100 0
b0111100 &
b0111100 4
b1100 5
b1100 $
b0111100 8
#20000
b1001 !
b1001 *
b1010 "
b1010 ,
b1001 #
b1001 .
b0011001 +
b0011001 '
b0011001 1
b1011010 -
b1011010 (
b1011010 2
b0011001 /
b0011001 )
b0011001 3
b0011001 0
b0011001 &
b0011001 4
b1001 5
b1001 $
b0011001 8
#30000
b0001 !
b0001 *
b0010 "
b0010 ,
b0001 #
b0001 .
b1101001 +
b1101001 '
b1101001 1
b0101010 -
b0101010 (
b0101010 2
b1101001 /
b1101001 )
b1101001 3
b1101001 0
b1101001 &
b1101001 4
b0001 5
b0001 $
b1101001 8
#40000
b1101 !
b1101 *
b1110 "
b1110 ,
b1101 #
b1101 .
b1010101 +
b1010101 '
b1010101 1
b0010110 -
b0010110 (
b0010110 2
b1010101 /
b1010101 )
b1010101 3
b1010101 0
b1010101 &
b1010101 4
b1101 5
b1101 $
b1010101 8
#50000
b1001 !
b1001 *
b0010 "
b0010 ,
b1001 #
b1001 .
b0011001 +
b0011001 '
b0011001 1
b0101010 -
b0101010 (
b0101010 2
b0011001 /
b0011001 )
b0011001 3
b0011001 0
b0011001 &
b0011001 4
b1001 5
b1001 $
b0011001 8
#60000
b1000 !
b1000 *
b1010 "
b1010 ,
b1010 #
b1010 .
b1110000 +
b1110000 '
b1110000 1
b1011010 -
b1011010 (
b1011010 2
b1011010 /
b1011010 )
b1011010 3
b1011010 0
b1011010 &
b1011010 4
b1010 5
b1010 $
b1011010 8
#70000
b0011 !
b0011 *
b0010 "
b0010 ,
b0011 #
b0011 .
b1000011 +
b1000011 '
b1000011 1
b0101010 -
b0101010 (
b0101010 2
b1000011 /
b1000011 )
b1000011 3
b1000011 0
b1000011 &
b1000011 4
b0011 5
b0011 $
b1000011 8
#80000
b1001 !
b1001 *
b1010 "
b1010 ,
b1001 #
b1001 .
b0011001 +
b0011001 '
b0011001 1
b1011010 -
b1011010 (
b1011010 2
b0011001 /
b0011001 )
b0011001 3
b0011001 0
b0011001 &
b0011001 4
b1001 5
b1001 $
b0011001 8
#90000
b1101 !
b1101 *
b1101 "
b1101 ,
b1011 #
b1011 .
b1010101 +
b1010101 '
b1010101 1
b1010101 -
b1010101 (
b1010101 2
b0110011 /
b0110011 )
b0110011 3
b1010101 0
b1010101 &
b1010101 4
b1101 5
b1101 $
b1010101 8
#100000
b1010 !
b1010 *
b1000 "
b1000 ,
b1000 #
b1000 .
b1011010 +
b1011010 '
b1011010 1
b1110000 -
b1110000 (
b1110000 2
b1110000 /
b1110000 )
b1110000 3
b1110000 0
b1110000 &
b1110000 4
b1000 5
b1000 $
b1110000 8
#110000
b1011 !
b1011 *
b0110 "
b0110 ,
b1011 #
b1011 .
b0110011 +
b0110011 '
b0110011 1
b1100110 -
b1100110 (
b1100110 2
b0110011 /
b0110011 )
b0110011 3
b0110011 0
b0110011 &
b0110011 4
b1011 5
b1011 $
b0110011 8
#120000
b0111 !
b0111 *
b0111 "
b0111 ,
b0001111 +
b0001111 '
b0001111 1
b0001111 -
b0001111 (
b0001111 2
b0001111 0
b0001111 &
b0001111 4
b0111 5
b0111 $
b0001111 8
#130000
b1111 !
b1111 *
b1111 "
b1111 ,
b1010 #
b1010 .
b1111111 +
b1111111 '
b1111111 1
b1111111 -
b1111111 (
b1111111 2
b1011010 /
b1011010 )
b1011010 3
b1111111 0
b1111111 &
b1111111 4
b1111 5
b1111 $
b1111111 8
#140000
b0111 !
b0111 *
b0111 "
b0111 ,
b1011 #
b1011 .
b0001111 +
b0001111 '
b0001111 1
b0001111 -
b0001111 (
b0001111 2
b0110011 /
b0110011 )
b0110011 3
b0001111 0
b0001111 &
b0001111 4
b0111 5
b0111 $
b0001111 8
#150000
b1111 !
b1111 *
b1111 "
b1111 ,
b1010 #
b1010 .
b1111111 +
b1111111 '
b1111111 1
b1111111 -
b1111111 (
b1111111 2
b1011010 /
b1011010 )
b1011010 3
b1111111 0
b1111111 &
b1111111 4
b1111 5
b1111 $
b1111111 8
